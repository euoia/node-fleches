#!/usr/bin/env node
var fs        = require("fs")
  , path      = require("path")
  , tty       = require('tty')
  , exec      = require('child_process').exec
  , argv      = require('optimist').argv
  , stack     = []
  , success   = true
  , args      = {env: process.env}
  , counts    = {ok: 0, total: 0}
  , base_path
  , dirs
  , files
  , test
  ;

// work for /test and /tests
// will throw otherwise
try {
  base_path = path.resolve(".", "tests");
  dirs      = fs.readdirSync(base_path);
} catch (exc) {
  base_path = path.resolve(".", "test");
  dirs      = fs.readdirSync(base_path);
}

// set env vars in a platform agnostic way
(Array.isArray(argv.e) ? argv.e : argv.e ? [argv.e] : [])
.forEach(function (env_var) {
  if(env_var.indexOf("=")!==-1) {
    var split = env_var.split("=");
    args.env[split[0]] = split[1];
  }
});

// try to get tty size to give to child process
var isatty = tty.isatty(1) && tty.isatty(2)
  , width  = isatty
    ? process.stdout.getWindowSize
      ? process.stdout.getWindowSize(1)[0]
      : tty.getWindowSize
        ? tty.getWindowSize()[1]
        : null
    : null
  ;

if(typeof width === "number") {
  args.env.SPECIFY_MAXCOLS = width;
}

// this is being executed from a runne
args.env.SPECIFY_FROM_RUNNER = true;

// set a reporter
args.env.SPECIFY_REPORTER = 
  argv.r || process.env.SPECIFY_REPORTER || 'default';

function runTests(tests, previousStatus) {
  if(success) {
    success = previousStatus;
  }
  if(tests[0]) {
    exec("node " + tests[0], args, ppTest(tests));
  } else {
    if (counts.ok > 1 && counts.total > 1) {
      try {
        var summarize = require('../reporters/' + args.env.SPECIFY_REPORTER);
        summarize("totals");
        summarize("summary", 
          { ok: counts.ok
          , fail: counts.total-counts.ok
          , notrun: 0
          , thrown: 0
          , _nostdout: true
          });
      } catch (exc) {}
    }
    return process.exit(success ? 0 : 1);
  }
}

function ppTest (tests) {
  var file_path = tests.shift();
  return function (err, stdout, stderr) {
    // update totals, if possible and provided by reporter
    var lines = stdout.split("\n");
    if(lines.length>0) {
      var last_line = lines[lines.length-1];
      if(last_line.indexOf("/") !== -1) {
        var values = last_line.split("/");
        if(values.length > 1) {
          var worked = +values[0];
          var total  = +values[1];
          if(!isNaN(worked) && !isNaN(total)) {
            counts.ok += worked;
            counts.total += total;
            lines.pop();
            stdout = lines.join("\n");
          }
        }
      }
    }
    process.stdout.write(stdout);
    process.stdout.write(stderr);
    runTests(tests, !(err || stderr));
  };
}

for(var dir in dirs) {
  var dir_path = path.resolve(base_path, dirs[dir]);
  if(fs.statSync(dir_path).isDirectory()) {
    files = fs.readdirSync(dir_path);
    for (var file in files) {
      var file_path = path.resolve(dir_path, files[file]);
      if(/\.js$|\.node$/.test(file_path)) {
        stack.push(file_path);
      }
    }
  }
}

runTests(stack, true);